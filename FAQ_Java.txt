Comment créer un fichier json en Java ?
On manipule le json en java en utilisant la classe JSONObject de la librairie json
On commence par créer une instance de la classe JSONObject en utilisant un constructeur sans paramètre
JSONObject json = new JSONObject();
json.put("age", 26);
json.getInteger("age");




Comment récupérer des données d'un fichier json en Java ?
JSONObject json = new JSONObject(données);
Integer x_value = (Integer) json.getInteger("x");
String y_value = (String) json.getString("y");
JSONArray jsonArray = json.getJSONArray("mon_array");
String name = jsonArray.getString(indice);




Comment vérifier qu'une liste est vide ou non ?
Avec la méthode isEmpty() de la classe ArrayList




Qu'est-ce qu'un thread ?
Un thread est un fil d'exécution qui exécute du code.
En Java les thread sont géré par la classe Thread et l'interface Runnable
Si on souhaite exécuter une tache en parallèle d'une autre plutôt que d'attendre la fin de celle-ci, on créé une instance de la classe Thread avec un constructeur prenant en paramètre un objet Runnable
Ensuite on démarre le thread avec la méthode start() de la classe Thread, qui appellera la méthode run() du Runnable passé en paramètre. C'est cette méthode run() qui contient le code à exécuter par le thread




Que se passe-t-il si deux thread utilisent le même objet en même temps ?
Ils utilisent les même données en même temps. Ce n'est pas très propre et peut poser problème, c'est pourquoi le mot-clé synchronized a été créé. synchronized (Objet) {code}. Tant que le code entre parenthèse est en cours d'exécution, l'objet Object est inaccessible et les threads devant l'utiliser attendront la fin du code en accolade pour le faire.
Placé devant une méthode (à la manière de static ou private), il signifie que si la méthode est appellé l'objet sera inaccessible aux autres thread tant que la méthode sera en cours d'exécution




Comment coordonner les thread entre eux ?
wait() et notify() sont des méthode de la classe Object qui permettent d'arrêter et de reprendre un thread.
Si un thread appelle la méthode wait() sur un objet, il sera mis en pause jusqu'à ce qu'un autre thread appelle la méthode notify() depuis ce même objet. La méthode notifyAll() réveille tous les thread en wait() depuis cet objet
On peut également appeller la méthode join() d'un objet Thread pour mettre en wait le thread actuel jusqu'à la fin du thread exécuté par cet objet Thread




A quoi sert la classe ThreadLocal ?
A gérer l'accessibilité des variables par les threads




Qu'est-ce qu'un interface uni-fonctionnelle ?
C'est une interface qui n'a qu'une méthode à implémenter.
Le principal avantage de ce genre d'interface est l'allégement du code :
Si une méthode demande une interface uni-fonctionnelle en paramètre, au lieu de créer une classe qui implémente cette interface on peut simplement définir la méthode de l'interface sans créer d'objet (soi-même) :
methode(() -> {code})
Le code dans les accolades sera considéré comme l'implémentation de l'unique méthode de l'interface
Runnable est un exemple d'interface uni-fonctionnelle, Callable un autre (qui renvoie une varaible)




A quoi sert la classe Semaphore ?
La classe Semaphore sert à gérer les ressources utilisées par les thread via un système de jetons
On créé une instance de la classe Semaphore avec un constructeur qui prend en paramètre le nombre de jeton.
Un Thread peut appeller la méthode aquire() de l'objet Semaphore pour obtenir un jeton, et release() pour le rendre.
La méthode tryAquire(ms) permet d'essayer d'obtenir un jeton pendant x ms
